using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DKC_Hack_Template
{
    static partial class ASM
    {
        // Addresses in hex
        public static Int32[] ASMaddresses = new Int32[]
        {
            0x9B49,0x9B4A,0x9B4B,0xE84E,0xE84F,0xE850,0xE851,0xE852,0xE9C0,0xE9C1,0xE9D4,0xE9D5,0xFFDC,0xFFDD,0xFFDE,0xFFDF,0xA6C50,0xA6C52,0xA6C53,0xA6C54,0xA6C55,0xA6C56,0xA6C57,0xA6C58,0xA6C59,0xA6C5A,0xA6C5B,0xA6C5C,0xA6C5D,0xA6C5E,0xA6C5F,0xA6C60,0xA6C61,0xA6C62,0xA6C63,0xA6C64,0xA6C65,0xA6C66,0xA6C67,0xA6C68,0xA6C69,0xA6C6A,0xA6C6B,0xA6C6C,0xA6C6D,0xA6C6E,0xA6C6F,0xA6C70,0xA6C71,0xA6C72,0xA6C73,0xA6C74,0xA6C75,0xA6C76,0xA6C77,0xA6C78,0xA6C7A,0xA6C7B,0xA6C7C,0xA6C7D,0xA6C7E,0xA6C7F,0xA6C80,0xA6C81,0xA6C82,0xA6C83,0xA6C84,0xA6C85,0xA6C86,0xA6C87,0xA6C88,0xA6C89,0xA6C8A,0xA6C8D,0xA6C8E,0xA6C90,0xA6C91,0xA6C92,0xA6C93,0xA6C94,0xA6C95,0xA6C96,0xA6C97,0xA6C98,0xA6C99,0xA6C9A,0xA6C9B,0xA6C9C,0xA6C9D,0xA6C9E,0xA6C9F,0xA6CA0,0xA6CA1,0xA6CA2,0xA6CA3,0xA6CA4,0xA6CA5,0xA6CA6,0xA6CA7,0xA6CA8,0xA6CA9,0xA6CAA,0xA6CAB,0xA6CAC,0xA6CAD,0xA6CAE,0xA6CAF,0xA6CB0,0xA6CB1,0xA6CB2,0xA6CB3,0xA6CB4,0xA6CB5,0xA6CB6,0xA6CB7,0xA6CB9,0xA6CBA,0xA6CBB,0xA6CBC,0xA6CBD,0xA6CBE,0xA6CBF,0xA6CC0,0xA6CC1,0xA6CC3,0xA6CC4,0xA6CC5,0xA6CC6,0xA6CC7,0xA6CC8,0xA6CC9,0xA6CCB,0xA6CCC,0xA6CCD,0xA6CCE,0xA6CCF,0xA6CD0,0xA6CD1,0xA6CD2,0xA6CD3,0xA6CD4,0xA6CD5,0xA6CD6,0xA6CD7,0xA6CD8,0xA6CDA,0xA6CDB,0xA6CDC,0xA6CDD,0xA6CDE,0xA6CDF,0xA6CE1,0xA6CE2,0xA6CE5,0xA6CE6,0xA6CE7,0xA6CE8,0xA6CE9,0xA6CEA,0xA6CEB,0xA6CEC,0xA6CED,0xA6CEE,0xA6CF0,0xA6CF1,0xA6CF2,0xA6CF3,0xA6CF4,0xA6CF5,0xA6CF6,0xA6CF7,0xA6CF9,0xA6CFA,0xA6CFB,0xA6CFC,0xA6CFD,0xA6CFE,0xA6CFF,0xA6D00,0xA6D01,0xA6D02,0xA6D03,0xA6D04,0xA6D05,0xA6D06,0xA6D08,0xA6D09,0xA6D0A,0xA6D0B,0xA6D0C,0xA6D0D,0xA6D0F,0xA6D11,0xA6D17,0xA6D1A,0xA6D1C,0xA6D1D,0xA6D22,0xA6D24,0xA6D26,0xA6D27,0xA6D28,0xA6D32,0xA6D34,0xA6D37,0xA6D3B,0xA6D3E,0xA6D3F,0xA6D40,0xA6D41,0xA6D46,0xA6D4E,0xA6D50,0xA6D51,0xA6D52,0xA6D53,0xA6D78,0xA6D7D,0xA6DB4,0xA6DB5,0xA6DB7,0xA6DCF,0xA6DDE,0xA6DE0,0xA6DE9,0xA6DEE,0xA6DF1,0xA6DF2,0xA6DF3,0xA6DF4,0xA6DF5,0x12FE8C,0x12FE8D,0x12FE8F,0x12FE90,0x12FE91,0x12FE93,0x12FE94,0x12FE95,0x12FE96,0x12FE97,0x12FE98,0x12FE99,0x12FE9A,0x12FE9C,0x12FE9D,0x12FE9E,0x12FE9F,0x12FEA0,0x12FEA1,0x12FEA2,0x12FEA3,0x12FEA4,0x12FEA6,0x12FEA7,0x12FEA8,0x12FEA9,0x12FEAA,0x12FEAB,0x12FEAC,0x12FEAD,0x12FEAE,0x12FEAF,0x12FEB0,0x12FEB1,0x12FEB2,0x12FEB3,0x12FEB4,0x12FEB5,0x12FEB7,0x12FEB8,0x12FEB9,0x12FEBA,0x12FEBC,0x12FEBD,0x12FEBE,0x12FEBF,0x23E1A9,0x23E1AA,0x23E1AB,0x23E1AC,0x23E1AD,0x23E1AE,0x23E1AF,0x23E1B0,0x23E1B1,0x23E1B2,0x23E1B3,0x23E1B4,0x23E1B5,0x23E1B6,0x23E1B7,0x23E1B8,0x23E1B9,0x23E1BA,0x23E1BB,0x23E1BC,0x23E1BD,0x23E1BE,0x23E1BF,0x23E1C0,0x23E1C1,0x23E1C2,0x23E1C3,0x23E1C4,0x23E1C5,0x23E1C6,0x23E1C7,0x23E1C8,0x23E1C9,0x23E1CA,0x23E1CB,0x23E1CC,0x23E1CD,0x23E1CE,0x23E1CF,0x23E1D0,0x23E1D1,0x23E1D2,0x23E1D3,0x23E1D4,0x23E1D5,0x23E1D6,0x23E1D7,0x23E1D8,0x23E1D9,0x23E1DA,0x23E1DB,0x23E1DC,0x23E1DD,0x23E1DE,0x23E1DF,0x23E1E0,0x23E1E1,0x23E1E2,0x23E1E3,0x23E1E4,0x23E1E5,0x23E1E6,0x23E1E7,0x23E1E8,0x23E1E9,0x23E1EA,0x23E1EB,0x23E1EC,0x23E1ED,0x23E1EE,0x23E1EF,0x23E1F0,0x23E1F1,0x23E1F2,0x23E1F3,0x23E1F4,0x23E1F5,0x23E1F6,0x23E1F7,0x23E1F8,0x23E1F9,0x23E1FA,0x23E1FB,0x23E1FC,0x23E1FD,0x23E1FE,0x23E1FF,0x23E200,0x23E201,0x23E202,0x23E203,0x23E204,0x23E205,0x23E206,0x23E208,0x23E209,0x23E20A,0x23E20B,0x23E20C,0x23E20D,0x23E20E,0x23E20F,0x23E210,0x23E211,0x23E212,0x23E213,0x23E214,0x23E215,0x23E216,0x23E217,0x23E218,0x23E219,0x23E21A,0x23E21B,0x23E21C,0x23E21D,0x23E21E,0x23E21F,0x23E220,0x23E221,0x23E222,0x23E223,0x23E224,0x23E225,0x23E226,0x23E227,0x23E228,0x23E229,0x23E22A,0x23E22B,0x23E22C,0x23E22D,0x23E22E,0x23E22F,0x23E230,0x23E231,0x23E232,0x23E233,0x23E235,0x23E237,0x23E239,0x23E23A,0x23E23B,0x23E23C,0x23E23D,0x23E23E,0x23E23F,0x23E240,0x23E241,0x23E242,0x23E243,0x23E244,0x23E245,0x23E246,0x23E247,0x23E248,0x23E249,0x23E24A,0x23E24B,0x23E24C,0x23E24D,0x23E24E,0x23E24F,0x23E250,0x23E251,0x358060,0x358061,0x358062,0x358063,0x358075,0x358077,0x358078,0x358079,0x35807A,0x35807B,0x35807C,0x35807D,0x35807E,0x358080,0x358082,0x358084,0x358086,0x358088,0x358089,0x35808A,0x35808B,0x35808C,0x35808E,0x358090,0x358092,0x358094,0x358096,0x358098,0x35809A,0x35809B,0x35809C,0x35809D,0x35809E,0x3580A0,0x3580A2,0x3580A3,0x3580A4,0x3580A5,0x3580A6,0x3580A8,0x3580AA,0x3580AB,0x3580AC,0x3580AD,0x3580C5,0x3580C6,0x3580C7,0x3580CB,0x3580CC,0x3580CE,0x3580DD,0x3580DE,0x3580DF,0x35FF00,0x35FF01,0x35FF02,0x35FF03,0x35FF04,0x35FF05,0x35FF06,0x35FF08,0x35FF09,0x35FF0A,0x35FF0B,0x35FF0C,0x35FF0D,0x35FF0E,0x35FF10,0x35FF11,0x35FF12,0x35FF13,0x35FF14,0x35FF15,0x35FF17,0x3882B8,0x3882B9,0x389F0B,0x389F0C,0x389F0D,0x389F0E,0x389F0F,0x389F10,0x398009,0x39800A,0x39800B,0x39800C,0x3BB155,0x3BB15B,0x3BB15C,0x3BB15D,0x3BB15F,0x3E8B45,0x3E8B46,0x3E8B47,0x3E9835,0x3E9836,0x3E9837,0x3E9CEA,0x3E9CEB,0x3E9CEC,0x3E9CED,0x3E9CEE,0x3E9CEF,0x3FA6C9,0x3FA6CA,0x3FA6CB,0x3FA6CC,0x3FA6CD,0x3FA6CE
        };
        // Values in hexadecimal
        public static byte[] ASMvalues = new byte[]
        {
            0xA9,0x1,0x0,0x22,0xB2,0xFE,0xD2,0xEA,0xEA,0xEA,0xEA,0xEA,0xA1,0xB0,0x5E,0x4F,0x9E,0x1,0xF4,0xB5,0xB5,0xAB,0xAB,0x98,0x30,0x16,0xA,0xA,0xAA,0xBF,0x54,0xB1,0xBB,0xA8,0xE8,0xE8,0xE2,0x20,0xBF,0x54,0xB1,0xBB,0x48,0xAB,0xC2,0x20,0xA6,0x86,0x22,0x6E,0x80,0xB5,0x8,0xA6,0x86,0xBD,0x1,0xF0,0x2,0x28,0x6B,0xBD,0x45,0xD,0x4C,0x7D,0x6C,0x8B,0x5A,0xA3,0x7,0xA8,0xB9,0x29,0xFF,0xD0,0x7,0xF4,0xB5,0xB5,0xAB,0xAB,0x80,0x8,0xE2,0x20,0x9,0x80,0x48,0xAB,0xC2,0x20,0x7A,0x22,0x6E,0x80,0xB5,0xAB,0x6B,0x8B,0x22,0x2F,0x80,0xBE,0xAB,0x6B,0x8F,0xF0,0xFF,0x7F,0xAD,0x15,0x1E,0x29,0x20,0xF0,0x1,0x6B,0xAF,0x79,0x5,0x7E,0x29,0x1,0xD0,0x1D,0xAD,0x15,0x1E,0x9,0x20,0x8D,0x15,0x1E,0xAF,0x63,0x5,0x7E,0xAA,0xBF,0xFC,0xF9,0x7E,0x29,0xFF,0x8F,0x65,0x5,0x7E,0xA9,0x1,0x6B,0xA9,0x6B,0x8F,0xF2,0xFF,0x7F,0xAD,0x15,0x1E,0x29,0x20,0xF0,0x1,0x6B,0xAD,0x15,0x1E,0x9,0x20,0x8D,0x15,0x1E,0xAF,0x63,0x5,0x7E,0xAA,0xBF,0xFC,0xF9,0x7E,0x29,0xFF,0x8F,0x65,0x5,0x7E,0xA9,0x1,0x6B,0x1,0x7,0xA,0xC,0xD,0x12,0x14,0x16,0x17,0x18,0x22,0x24,0x27,0x2B,0x2E,0x2F,0x30,0x31,0x36,0x3E,0x40,0x41,0x42,0x43,0x68,0x6D,0xA4,0xA5,0xA7,0xBF,0xCE,0xD0,0xD9,0xDE,0xE1,0xE2,0xE3,0xE4,0xE5,0xAF,0x3E,0x7E,0xC9,0x68,0xD0,0x4,0x5C,0xA0,0xFE,0xD2,0xAF,0x3E,0x7E,0xA,0xAA,0x6B,0xAF,0x79,0x5,0x7E,0x9,0x40,0x29,0xFF,0xFC,0x8F,0x79,0x5,0x7E,0x5C,0x99,0xFE,0xD2,0xA5,0x3E,0xC9,0xEA,0xD0,0x3,0xA9,0x1,0x8D,0x63,0x5,0x6B,0xB,0xA9,0x0,0x1,0x5B,0xA9,0x11,0xE2,0x85,0x20,0xA9,0xE2,0xA3,0x85,0x21,0xA9,0x5,0xD0,0x85,0x23,0x20,0xC8,0xE1,0x2B,0xAE,0x67,0x5,0xBD,0x7A,0xA1,0x6B,0xAE,0x8E,0x0,0x64,0x25,0xAD,0x8E,0x0,0xC9,0x0,0x4,0x90,0x1,0x60,0xA4,0x25,0xB7,0x20,0xE6,0x25,0x29,0xFF,0x0,0xC9,0x0,0x0,0xD0,0x1,0x60,0xC9,0x20,0x0,0xD0,0xA,0xA5,0x23,0x18,0x69,0x7,0x0,0x85,0x23,0x80,0xD9,0x18,0x69,0x60,0x34,0x9D,0x2,0x0,0xA5,0x23,0x18,0x69,0x7,0x0,0x9D,0x0,0x0,0x85,0x23,0xE8,0xE8,0xE8,0x8E,0x8E,0x0,0x5C,0xCD,0xE1,0xA3,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5C,0x50,0x6C,0xCA,0x7F,0xA,0xAA,0x7C,0x7C,0x80,0xB6,0x80,0xBC,0xD1,0xCF,0xE5,0xF7,0xC,0x81,0x21,0x81,0x36,0x52,0x64,0x79,0x8E,0xA3,0xCB,0x1E,0x82,0x83,0x82,0xA5,0xBF,0x1C,0x83,0x3B,0x83,0xC7,0xD8,0xE3,0x81,0x0,0xFF,0xA8,0x6C,0xCA,0x5C,0x6A,0xB5,0x85,0x6C,0xCA,0x8B,0x4B,0xF4,0x12,0xFF,0xB9,0x0,0xE2,0x20,0x48,0xC2,0x20,0xB9,0x2,0x3A,0x48,0x6B,0xAB,0x5C,0x6A,0xB5,0x0,0x70,0x22,0xA9,0xE1,0xA3,0xEA,0xEA,0x22,0x8C,0xFE,0xD2,0x8F,0x82,0x27,0xE5,0x80,0xA9,0x20,0x0,0xA9,0x20,0x0,0x22,0xAF,0x6C,0xCA,0xEA,0xEA,0x22,0xE6,0x6C,0xCA,0xEA,0xEA
        };

        public static void ApplyPatch(Int32[] addresses, byte[] values, byte[] rom)
        {
            for (int i = 0; i < addresses.Length && i < values.Length; i++)
            {
                rom[addresses[i]] = values[i];
            }
        }
        public static void ApplyPatch(Int32[] addresses, byte[] values, List<byte> rom)
        {
            for (int i = 0; i < addresses.Length && i < values.Length; i++)
            {
                rom[addresses[i]] = values[i];
            }
        }
    }
}
